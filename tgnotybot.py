import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message
import asyncio
import re

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
API_TOKEN = ''

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
def parse_time(time_str: str) -> int:
    """
    –ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É –≤—Ä–µ–º–µ–Ω–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "10min", "1h", "30s") –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥.
    """
    time_units = {
        "s": 1,          # —Å–µ–∫—É–Ω–¥—ã
        "sec": 1,       # —Å–µ–∫—É–Ω–¥—ã
        "m": 60,        # –º–∏–Ω—É—Ç—ã
        "min": 60,      # –º–∏–Ω—É—Ç—ã
        "h": 3600,      # —á–∞—Å—ã
        "hour": 3600,   # —á–∞—Å—ã
    }

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —á–∏—Å–ª–∞ –∏ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è
    match = re.match(r"(\d+)\s*([a-zA-Z]+)", time_str)
    if not match:
        raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏")

    number, unit = match.groups()
    unit = unit.lower()

    if unit not in time_units:
        raise ValueError("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –µ–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏")

    return int(number) * time_units[unit]

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def send_welcome(message: Message):
    await message.reply(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞.\n–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /set <–≤—Ä–µ–º—è> <—Ç–µ–∫—Å—Ç>, "
        "—á—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ.\n–ù–∞–ø—Ä–∏–º–µ—Ä: /set 10min –µ–¥–∞ —Ä–∞–∑–æ–≥—Ä–µ–ª–∞—Å—å."
        "\n–§–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏: 1sec | 1min | 1h"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /set
@dp.message(Command("set"))
async def set_timer(message: Message):
    try:
        # –†–∞–∑–¥–µ–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –≤—Ä–µ–º—è –∏ —Ç–µ–∫—Å—Ç
        args = message.text.split(maxsplit=2)
        if len(args) < 3:
            await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set <–≤—Ä–µ–º—è> <—Ç–µ–∫—Å—Ç>")
            return

        time_str = args[1]  # –í—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, "10min")
        reminder_text = args[2]  # –¢–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è

        # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è
        seconds = parse_time(time_str)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        await message.reply(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {time_str}: {reminder_text}")

        # –ñ–¥–µ–º —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥
        await asyncio.sleep(seconds)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        await message.answer(f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {reminder_text}")
    except ValueError as e:
        await message.reply(f"–û—à–∏–±–∫–∞: {e}")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())